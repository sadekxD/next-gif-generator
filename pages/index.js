import Head from "next/head";
import { useCallback, useEffect, useRef, useState } from "react";
import styles from "../styles/Home.module.css";
import "react-loader-spinner/dist/loader/css/react-spinner-loader.css";
import Loader from "react-loader-spinner";
import Masonry from "react-masonry-css";
import useFetch from "../hooks/useFetch";

const breakpointColumnsObj = {
	default: 4,
	1100: 4,
	700: 3,
	500: 2,
};

export default function Home() {
	const [offset, setOffset] = useState(0);
	const [search, setSearch] = useState("");
	const [query, setQuery] = useState("");
	const { loading, error, list } = useFetch(query, offset);
	const load = useRef(null);

	const handleObserver = useCallback((entries) => {
		const target = entries[0];
		console.log(target);
		if (target.isIntersecting) {
			setOffset((pre) => pre + 8);
		}
	}, []);

	useEffect(() => {
		const option = {
			root: null,
			rootMargin: "20px",
			threshold: 0,
		};

		const observer = new IntersectionObserver(handleObserver, option);
		if (load.current) observer.observe(load.current);
	}, [handleObserver]);

	return (
		<div>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div>
				<h1 className={styles.header}>Infinite Gif Generator</h1>
				<form
					onSubmit={(e) => {
						e.preventDefault();
						setQuery(search);
					}}
					className={styles.searchForm}
				>
					<input
						type="text"
						value={search}
						placeholder="Search gif"
						onChange={(e) => {
							setSearch(e.target.value);
						}}
					/>
					<button type="submit">Search</button>
				</form>

				<Masonry
					breakpointCols={breakpointColumnsObj}
					className="my-masonry-grid"
					columnClassName="my-masonry-grid_column"
				>
					{list?.map((gif, i) => (
						<div key={i} style={{ display: "flex" }}>
							<video autoPlay src={gif} className={styles.video} />
						</div>
					))}
					{loading && (
						<div className={styles.loader}>
							<Loader type="ThreeDots" color="#000" height={100} width={100} />
						</div>
					)}
					{error && <p>Error!</p>}
				</Masonry>
				<div ref={load} />
			</div>
		</div>
	);
}
